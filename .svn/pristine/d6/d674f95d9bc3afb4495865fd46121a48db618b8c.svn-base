package cn.jj.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import cn.jj.Config;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

/**
 * 操作redis数据库的工具类 Created by dajiangtai
 *
 */
public class RedisUtil {

	// redis中用于存储代理ip的队列
	public static final String PROXY_IP_PORT = "proxy.ip.port";

	private JedisPool jedisPool = null;
	
	private static RedisUtil redisUtil;

	/**
	 * 构造方法
	 */
	private RedisUtil() {
		// jedisPool = new JedisPool(poolConfig, "192.168.0.150", 6379);
		JedisPoolConfig poolConfig = new JedisPoolConfig();
		poolConfig.setMaxIdle(Config.REDIS_MAX_IDLE);
		poolConfig.setMaxTotal(Config.REDIS_MAX_TOTAL);
		poolConfig.setMaxWaitMillis(Config.REDIS_MAX_WAIT_MILLS);
		poolConfig.setTestOnBorrow(Config.REDIS_TEST_ON_BORROW);
		//jedisPool = new JedisPool(poolConfig, Config.REDIS_IP, Config.REDIS_PORT);
		jedisPool = new JedisPool(poolConfig, Config.REDIS_IP,  Config.REDIS_PORT, 2000, null, 5);

	}
	
	public static RedisUtil getInstance(){
		if(redisUtil==null){
			synchronized ((RedisUtil.class)) {
				redisUtil = new RedisUtil();
			}
		}
		return redisUtil;
	}

	/**
	 * @Description 查询
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:05:31
	 * @action lrange
	 * @return List<String>
	 */
	public List<Object> lrange(String key, int start, int end) {
		Jedis resource = jedisPool.getResource();
		List<byte[]> list = resource.lrange(key.getBytes(), start, end);
		List<Object> obj = new ArrayList<>();
		for (int i = 0; i < list.size(); i++) {
			byte[] bs = list.get(i);
			Object unserizlize = this.unserizlize(bs);
			obj.add(unserizlize);
		}
		jedisPool.close();
		return obj;
	}

	/**
	 * 
	 * @Description 添加list key,value是string
	 * @author 赵乐
	 * @date 2017年12月8日 上午11:21:25
	 * @action addStr
	 * @param @param
	 *            Key
	 * @param @param
	 *            url
	 * @return void
	 */
	public void addStr(String Key, String url) {
		Jedis resource = jedisPool.getResource();
		resource.lpush(Key, url);
		resource.close();
	}

	/**
	 * 
	 * @Description list中获取str
	 * @author 赵乐
	 * @date 2017年12月8日 上午11:25:55
	 * @action poll
	 * @param @param
	 *            key
	 * @param @return
	 * @return String
	 */
	public String pollStr(String key) {
		Jedis resource = jedisPool.getResource();
		String rpop = resource.rpop(key);
		resource.close();
		return rpop;
	}

	/**
	 * @Description 添加list
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:05:22
	 * @action add
	 * @return void
	 */
	public void add(String Key, Object obj) {
		Jedis resource = jedisPool.getResource();
		resource.lpush(Key.getBytes(), this.serialize(obj));
		resource.close();
	}

	/**
	 * @Description list中获取
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:05:03
	 * @action poll
	 * @return String
	 */
	public Object poll(String key) {
		Jedis resource = jedisPool.getResource();
		byte[] rpop = resource.rpop(key.getBytes());
		Object unserizlize = null;
		if (Objects.nonNull(rpop)) {
			unserizlize = this.unserizlize(rpop);
		}
		resource.close();
		return unserizlize;
	}

	/**
	 * @Description 添加set
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:04:57
	 * @action addSet
	 * @return void
	 */
	public void addSet(String Key, String value) {
		Jedis resource = jedisPool.getResource();
		resource.sadd(Key, value);
		resource.close();
	}

	/**
	 * @Description 随机获取Set 值
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:04:50
	 * @action getSet
	 * @return String
	 */
	public String getSet(String key) {
		Jedis resource = jedisPool.getResource();
		String value = resource.srandmember(key);
		jedisPool.close();
		return value;
	}

	/**
	 * @Description 删除Set 随机值
	 * @author 徐仁杰
	 * @date 2017年11月30日 上午10:04:42
	 * @action deleteSet
	 * @return void
	 */
	public void deleteSet(String key, String value) {
		Jedis resource = jedisPool.getResource();
		resource.srem(key, value);
		jedisPool.close();
	}

	/**
	 * @Description 序列化
	 * @author 徐仁杰
	 * @date 2017年11月17日 上午10:46:19
	 * @action serialize
	 * @return byte[]
	 */
	public byte[] serialize(Object obj) {
		ObjectOutputStream obi = null;
		ByteArrayOutputStream bai = null;
		try {
			bai = new ByteArrayOutputStream();
			obi = new ObjectOutputStream(bai);
			obi.writeObject(obj);
			byte[] byt = bai.toByteArray();
			return byt;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * @Description 反序列化
	 * @author 徐仁杰
	 * @date 2017年11月17日 上午10:46:27
	 * @action unserizlize
	 * @return Object
	 */
	public Object unserizlize(byte[] byt) {
		ObjectInputStream oii = null;
		ByteArrayInputStream bis = null;
		bis = new ByteArrayInputStream(byt);
		try {
			oii = new ObjectInputStream(bis);
			Object obj = oii.readObject();
			return obj;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// 根据key删除单条记录
	public long del(String key) {
		Jedis jedis = jedisPool.getResource();
		Long result = jedis.del(key);
		jedis.close();
		return result;
	}

	public Jedis getJedis() {
		Jedis resource = jedisPool.getResource();
		return resource;
	}

}